{"id":"b7cc2bc8f8782909156a026105c4141f","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/SimpleStorage.sol":{"content":"//SPDX-License-Identifier:MIT\npragma solidity ^0.8.18; //this is the solidty version\n\ncontract SimpleStorage{\n    //Basic Types: boolean, uint, int, adress, bytes\n    uint256  myFavoriteNumber; //0\n\n    struct Person{\n        uint256 favoriteNumber;\n        string name;\n    }\n\n    // Person public myFriend = Person({\n    //     favoriteNumber:1,\n    //     name:\"pat\"\n    // });\n\n    //dynamic array\n    Person[] public myFriends; // []\n\n\n    //Static array\n    // Person[4] public myFriends; // []\n    \n    mapping(string => uint256) public nameToFavoriteNumber;\n\n    function stroe(uint256 _favoriteNumber) public {\n        myFavoriteNumber = _favoriteNumber;\n    }\n\n    function getter() public view returns(uint256){\n        return myFavoriteNumber;\n    }\n\n    function addPerson(string calldata _name, uint256 _number) public{\n        myFriends.push(Person({\n            favoriteNumber:_number,\n            name:_name\n        }));\n        nameToFavoriteNumber[_name] = _number;\n    }\n\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.1","sources":{"contracts/SimpleStorage.sol":{"id":0,"ast":{"absolutePath":"contracts/SimpleStorage.sol","exportedSymbols":{"SimpleStorage":[58]},"id":59,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"30:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":58,"linearizedBaseContracts":[58],"name":"SimpleStorage","nameLocation":"95:13:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3,"mutability":"mutable","name":"myFavoriteNumber","nameLocation":"176:16:0","nodeType":"VariableDeclaration","scope":58,"src":"167:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2,"name":"uint256","nodeType":"ElementaryTypeName","src":"167:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"canonicalName":"SimpleStorage.Person","id":8,"members":[{"constant":false,"id":5,"mutability":"mutable","name":"favoriteNumber","nameLocation":"234:14:0","nodeType":"VariableDeclaration","scope":8,"src":"226:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"226:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"name","nameLocation":"265:4:0","nodeType":"VariableDeclaration","scope":8,"src":"258:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":6,"name":"string","nodeType":"ElementaryTypeName","src":"258:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Person","nameLocation":"210:6:0","nodeType":"StructDefinition","scope":58,"src":"203:73:0","visibility":"public"},{"constant":false,"functionSelector":"6663e66d","id":12,"mutability":"mutable","name":"myFriends","nameLocation":"422:9:0","nodeType":"VariableDeclaration","scope":58,"src":"406:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$8_storage_$dyn_storage","typeString":"struct SimpleStorage.Person[]"},"typeName":{"baseType":{"id":10,"nodeType":"UserDefinedTypeName","pathNode":{"id":9,"name":"Person","nameLocations":["406:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":8,"src":"406:6:0"},"referencedDeclaration":8,"src":"406:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$8_storage_ptr","typeString":"struct SimpleStorage.Person"}},"id":11,"nodeType":"ArrayTypeName","src":"406:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$8_storage_$dyn_storage_ptr","typeString":"struct SimpleStorage.Person[]"}},"visibility":"public"},{"constant":false,"functionSelector":"8bab8dd5","id":16,"mutability":"mutable","name":"nameToFavoriteNumber","nameLocation":"544:20:0","nodeType":"VariableDeclaration","scope":58,"src":"510:54:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"typeName":{"id":15,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":13,"name":"string","nodeType":"ElementaryTypeName","src":"518:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"510:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":14,"name":"uint256","nodeType":"ElementaryTypeName","src":"528:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":25,"nodeType":"Block","src":"618:51:0","statements":[{"expression":{"id":23,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":21,"name":"myFavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"628:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":22,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"647:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"628:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":24,"nodeType":"ExpressionStatement","src":"628:34:0"}]},"functionSelector":"1d3849e4","id":26,"implemented":true,"kind":"function","modifiers":[],"name":"stroe","nameLocation":"580:5:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"_favoriteNumber","nameLocation":"594:15:0","nodeType":"VariableDeclaration","scope":26,"src":"586:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":17,"name":"uint256","nodeType":"ElementaryTypeName","src":"586:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"585:25:0"},"returnParameters":{"id":20,"nodeType":"ParameterList","parameters":[],"src":"618:0:0"},"scope":58,"src":"571:98:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":33,"nodeType":"Block","src":"721:40:0","statements":[{"expression":{"id":31,"name":"myFavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"738:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":30,"id":32,"nodeType":"Return","src":"731:23:0"}]},"functionSelector":"993a04b7","id":34,"implemented":true,"kind":"function","modifiers":[],"name":"getter","nameLocation":"684:6:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"690:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":34,"src":"713:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":28,"name":"uint256","nodeType":"ElementaryTypeName","src":"713:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"712:9:0"},"scope":58,"src":"675:86:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":56,"nodeType":"Block","src":"832:158:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":45,"name":"_number","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"893:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":46,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"919:5:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":44,"name":"Person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"857:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Person_$8_storage_ptr_$","typeString":"type(struct SimpleStorage.Person storage pointer)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["878:14:0","914:4:0"],"names":["favoriteNumber","name"],"nodeType":"FunctionCall","src":"857:78:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Person_$8_memory_ptr","typeString":"struct SimpleStorage.Person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Person_$8_memory_ptr","typeString":"struct SimpleStorage.Person memory"}],"expression":{"id":41,"name":"myFriends","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"842:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$8_storage_$dyn_storage","typeString":"struct SimpleStorage.Person storage ref[] storage ref"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"852:4:0","memberName":"push","nodeType":"MemberAccess","src":"842:14:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Person_$8_storage_$dyn_storage_ptr_$_t_struct$_Person_$8_storage_$returns$__$attached_to$_t_array$_t_struct$_Person_$8_storage_$dyn_storage_ptr_$","typeString":"function (struct SimpleStorage.Person storage ref[] storage pointer,struct SimpleStorage.Person storage ref)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"842:94:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49,"nodeType":"ExpressionStatement","src":"842:94:0"},{"expression":{"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":50,"name":"nameToFavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"946:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":52,"indexExpression":{"id":51,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"967:5:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"946:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":53,"name":"_number","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"976:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"946:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":55,"nodeType":"ExpressionStatement","src":"946:37:0"}]},"functionSelector":"6f760f41","id":57,"implemented":true,"kind":"function","modifiers":[],"name":"addPerson","nameLocation":"776:9:0","nodeType":"FunctionDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"_name","nameLocation":"802:5:0","nodeType":"VariableDeclaration","scope":57,"src":"786:21:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":35,"name":"string","nodeType":"ElementaryTypeName","src":"786:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"_number","nameLocation":"817:7:0","nodeType":"VariableDeclaration","scope":57,"src":"809:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":37,"name":"uint256","nodeType":"ElementaryTypeName","src":"809:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"785:40:0"},"returnParameters":{"id":40,"nodeType":"ParameterList","parameters":[],"src":"832:0:0"},"scope":58,"src":"767:223:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":59,"src":"86:907:0","usedErrors":[],"usedEvents":[]}],"src":"30:963:0"}}},"contracts":{"contracts/SimpleStorage.sol":{"SimpleStorage":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_number","type":"uint256"}],"name":"addPerson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"myFriends","outputs":[{"internalType":"uint256","name":"favoriteNumber","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"nameToFavoriteNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_favoriteNumber","type":"uint256"}],"name":"stroe","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"addPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myFriends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"favoriteNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameToFavoriteNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_favoriteNumber\",\"type\":\"uint256\"}],\"name\":\"stroe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleStorage.sol\":\"SimpleStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleStorage.sol\":{\"keccak256\":\"0x4864a39bf008b9d496164edc4f9c1553628cc82213289c73883aae94f07f5965\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://871bd916dbd53daefe29295480970ab46b3a9ea9eb20769289617e0bdfc0bd0c\",\"dweb:/ipfs/QmQAM5pJNShXVjcYsmSZdF2Ns2JvGt9mH7H9xcBLD188pa\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"SimpleStorage.sol:SimpleStorage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[10]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.le\t@.BB0_6\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.eq\t@.BB0_29\n\tsub.s!\t@CPI0_4[0], r2, r4\n\tjump.eq\t@.BB0_66\n\tsub.s!\t@CPI0_5[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_8[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_6:\n\tsub.s!\t@CPI0_6[0], r2, r4\n\tjump.eq\t@.BB0_11\n\tsub.s!\t@CPI0_7[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tsub!\tr1, r3, r3\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r2\n\tshl.s\t1, r1, r4\n\tadd\t@CPI0_13[0], r4, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r6\n\tadd.ne\tr5, r0, r6\n\tadd\t@CPI0_12[0], r4, r4\n\tsub.s!\t31, r6, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\tsub!\tr3, r5, r5\n\tjump.eq\t@.BB0_20\n.BB0_18:\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_29:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_9[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tsub!\tr4, r3, r4\n\tjump.ge\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r5\n\tld\tr5, r6\n\tsub.s!\t@CPI0_9[0], r6, r5\n\tjump.gt\t@.BB0_2\n\tadd\tr2, r6, r2\n\tadd\t36, r2, r2\n\tsub!\tr2, r3, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r7\n\tadd\t192, r0, r2\n\tst.1\t64, r2\n\tadd\t31, r6, r3\n\tsub.s\t32, r0, r11\n\tand\tr3, r11, r3\n\tadd\t63, r3, r3\n\tand\tr3, r11, r3\n\tst.1\t128, r7\n\tsub.s!\t@CPI0_11[0], r3, r5\n\tjump.gt\t@.BB0_35\n\tadd\t192, r3, r3\n\tst.1\t64, r3\n\tand\t31, r6, r8\n\tadd\t32, r4, r10\n\tptr.add\tr1, r10, r1\n\tst.1\t192, r6\n\tshr.s!\t5, r6, r9\n\tjump.eq\t@.BB0_74\n\tadd\tr0, r0, r3\n.BB0_39:\n\tshl.s\t5, r3, r4\n\tptr.add\tr1, r4, r5\n\tld\tr5, r5\n\tadd\t224, r4, r4\n\tst.1\tr4, r5\n\tadd\t1, r3, r3\n\tsub!\tr3, r9, r4\n\tjump.lt\t@.BB0_39\n.BB0_74:\n\tsub!\tr8, r0, r3\n\tjump.eq\t@.BB0_41\n\tshl.s\t5, r9, r3\n\tptr.add\tr1, r3, r1\n\tshl.s\t3, r8, r4\n\tadd\t224, r3, r3\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr3, r1\n.BB0_41:\n\tadd\t224, r6, r1\n\tst.1\tr1, r0\n\tst.1\t160, r2\n\tadd\t1, r0, r5\n\tsload\tr5, r1\n\tsub.s!\t@CPI0_9[0], r1, r2\n\tjump.gt\t@.BB0_35\n\tadd\t1, r1, r2\n\tsstore\tr5, r2\n\tst.1\t0, r5\n\tshl.s\t1, r1, r1\n\tadd\t@CPI0_12[0], r1, r2\n\tld.1\t128, r3\n\tsstore\tr2, r3\n\tadd\t@CPI0_13[0], r1, r4\n\tld.1\t192, r12\n\tsub.s!\t@CPI0_9[0], r12, r1\n\tjump.le\t@.BB0_43\n.BB0_35:\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_66:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_9[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r2\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_2\n\tadd\t4, r4, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r2\n\tadd\t36, r4, r1\n\tnear_call\tr0, @abi_decode_available_length_string, @DEFAULT_UNWIND\n\tld.1.inc\tr1, r3, r1\n\tadd\tr3, r0, stack-[9]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[10]\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\t2, r0, r4\n\tadd\tstack-[9], r0, r3\n\tadd\tstack-[10], r0, r1\n\tadd\tr3, r1, r2\n\tst.1\tr2, r4\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_10[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_11:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_20:\n\tsload\tr4, r4\n\tadd\tr4, r0, stack-[10]\n\tst.1\t128, r6\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_22\n\tadd\tr6, r0, stack-[9]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_14[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[9], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_26\n\tadd\t160, r0, r1\n\tjump\t@.BB0_21\n.BB0_22:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr6, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_21:\n\tsub.s\t128, r1, r2\n\tadd\t128, r0, r1\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r4\n\tadd\tr4, r0, stack-[9]\n\tadd\t32, r4, r1\n\tadd\t64, r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[10], r0, r1\n\tst.1\tr4, r1\n\tadd\t64, r4, r1\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[10]\n\tst.1\tr1, r3\n\tadd\t96, r4, r2\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t96, r1, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[9], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_26:\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_27:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t160, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r5, r4\n\tjump.lt\t@.BB0_27\n\tadd\t192, r2, r1\n\tjump\t@.BB0_21\n.BB0_43:\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_18\n\tadd\tr11, r0, stack-[1]\n\tadd\tr5, r0, stack-[2]\n\tadd\tr10, r0, stack-[4]\n\tadd\tr9, r0, stack-[5]\n\tadd\tr8, r0, stack-[6]\n\tadd\tr7, r0, stack-[7]\n\tadd\tr3, r0, stack-[3]\n\tsub.s!\t32, r3, r1\n\tadd\tr6, r0, stack-[9]\n\tadd\tr4, r0, stack-[8]\n\tadd\tr12, r0, stack-[10]\n\tjump.lt\t@.BB0_47\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_14[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[10], r0, r12\n\tadd\t31, r12, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r12, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[8], r0, r4\n\tjump.ge\t@.BB0_47\n.BB0_48:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_48\n.BB0_47:\n\tsub.s!\t31, r12, r1\n\tjump.le\t@.BB0_63\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_14[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[10], r0, r3\n\tand!\tstack-[1], r3, r2\n\tld\tr1, r1\n\tjump.ne\t@.BB0_57\n\tadd\t224, r0, r3\n\tjump\t@.BB0_60\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_63:\n\tsub!\tstack-[10], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_65\n\tld.1\t224, r1\n.BB0_65:\n\tadd\tstack-[10], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, r2\n\tjump\t@.BB0_49\n.BB0_57:\n\tadd\t32, r0, r4\n\tadd\tr0, r0, r3\n.BB0_58:\n\tadd\tr4, r0, r5\n\tadd\t192, r5, r4\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r3\n\tsub!\tr3, r2, r6\n\tjump.lt\t@.BB0_58\n\tadd\t224, r5, r3\n.BB0_60:\n\tsub.s!\tstack-[10], r2, r2\n\tjump.ge\t@.BB0_62\n\tadd\tstack-[10], r0, r2\n\tshl.s\t3, r2, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r4\n\tshr\tr4, r2, r2\n\txor\tr2, r4, r2\n\tld.1\tr3, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB0_62:\n\tadd\tstack-[10], r0, r1\n\tshl.s\t1, r1, r1\n\tadd\tstack-[2], r0, r2\n.BB0_49:\n\tor\tr1, r2, r1\n\tadd\tstack-[8], r0, r2\n\tsstore\tr2, r1\n\tadd\tstack-[4], r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r2\n\tld.1\t64, r1\n\tadd\tstack-[5], r0, r6\n\tsub!\tr6, r0, r3\n\tjump.eq\t@.BB0_73\n\tadd\tr0, r0, r3\n.BB0_51:\n\tshl.s\t5, r3, r4\n\tadd\tr1, r4, r5\n\tptr.add\tr2, r4, r4\n\tld\tr4, r4\n\tst.1\tr5, r4\n\tadd\t1, r3, r3\n\tsub!\tr3, r6, r4\n\tjump.lt\t@.BB0_51\n.BB0_73:\n\tadd\tstack-[6], r0, r4\n\tsub!\tr4, r0, r3\n\tjump.eq\t@.BB0_53\n\tshl.s\t5, r6, r3\n\tptr.add\tr2, r3, r2\n\tadd\tr1, r3, r3\n\tshl.s\t3, r4, r4\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr2, r2\n\tsub\t256, r4, r4\n\tshr\tr2, r4, r2\n\tshl\tr2, r4, r2\n\tor\tr2, r5, r2\n\tst.1\tr3, r2\n.BB0_53:\n\tadd\tstack-[9], r0, r4\n\tadd\tr1, r4, r2\n\tadd\t2, r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r4, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nfinalize_allocation:\n.func_begin1:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tjump.gt\t@.BB1_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_2\n\tst.1\t64, r1\n\tret\n.BB1_2:\n\tadd\t@CPI1_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\ncopy_memory_to_memory_with_cleanup:\n.func_begin2:\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r4\n.BB2_2:\n\tadd\tr4, r2, r5\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr3, r2, r1\n\tst.1\tr1, r0\n\tret\n.func_end2:\n\nabi_decode_available_length_string:\n.func_begin3:\n\tadd\tr1, r0, r4\n\tsub.s!\t@CPI3_0[0], r2, r1\n\tjump.ge\t@.BB3_1\n\tadd\t31, r2, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI3_1[0], r5, r7\n\tjump.gt\t@.BB3_1\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB3_1\n\tst.1\t64, r5\n\tst.1.inc\tr1, r2, r5\n\tadd\tr2, r4, r6\n\tsub!\tr6, r3, r3\n\tjump.gt\t@.BB3_5\n\tand\t31, r2, r3\n\tptr.add\tstack[@ptr_calldata], r4, r4\n\tshr.s!\t5, r2, r6\n\tjump.eq\t@.BB3_11\n\tadd\tr0, r0, r7\n.BB3_8:\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r9\n\tptr.add\tr4, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB3_8\n.BB3_11:\n\tsub!\tr3, r0, r7\n\tjump.eq\t@.BB3_10\n\tshl.s\t5, r6, r6\n\tptr.add\tr4, r6, r4\n\tadd\tr5, r6, r6\n\tshl.s\t3, r3, r3\n\tld.1\tr6, r7\n\tshl\tr7, r3, r7\n\tshr\tr7, r3, r7\n\tld\tr4, r4\n\tsub\t256, r3, r3\n\tshr\tr4, r3, r4\n\tshl\tr4, r3, r3\n\tor\tr3, r7, r3\n\tst.1\tr6, r3\n.BB3_10:\n\tadd\tr5, r2, r2\n\tst.1\tr2, r0\n\tret\n.BB3_1:\n\tadd\t@CPI3_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB3_5:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\n__sha3:\n.func_begin4:\n\tadd\t@CPI4_0[0], r0, r3\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_2\n\tld\tr1, r1\n\tret\n.BB4_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI4_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1870008128\nCPI0_3:\n\t.cell 1870008129\nCPI0_4:\n\t.cell 2343275989\nCPI0_5:\n\t.cell 2570716343\nCPI0_6:\n\t.cell 490228196\nCPI0_7:\n\t.cell 1717823085\nCPI0_8:\n\t.cell 2535301202817642044428229017600\nCPI0_9:\nCPI1_0:\nCPI3_1:\n\t.cell 18446744073709551615\nCPI0_10:\n\t.cell 2535301200456458802993406410752\nCPI0_11:\n\t.cell 18446744073709551423\nCPI0_12:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_13:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860937\nCPI0_14:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_15:\nCPI1_1:\nCPI3_2:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_16:\nCPI1_2:\nCPI3_3:\n\t.cell 2852213850513516153367582212096\nCPI3_0:\n\t.cell 18446744073709551616\nCPI4_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":""},"methodIdentifiers":{"addPerson(string,uint256)":"6f760f41","getter()":"993a04b7","myFriends(uint256)":"6663e66d","nameToFavoriteNumber(string)":"8bab8dd5","stroe(uint256)":"1d3849e4"}},"irOptimized":"/// @use-src 0:\"contracts/SimpleStorage.sol\"\nobject \"SimpleStorage_58\" {\n    code {\n        {\n            /// @src 0:86:993  \"contract SimpleStorage{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage_58_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage_58_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/SimpleStorage.sol\"\n    object \"SimpleStorage_58_deployed\" {\n        code {\n            {\n                /// @src 0:86:993  \"contract SimpleStorage{...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x1d3849e4 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        sstore(_3, calldataload(_2))\n                        return(_3, _3)\n                    }\n                    case 0x6663e66d {\n                        if callvalue() { revert(_3, _3) }\n                        let _4 := 32\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_3, _3) }\n                        let value := calldataload(_2)\n                        let _5 := 1\n                        /// @src 0:406:431  \"Person[] public myFriends\"\n                        if iszero(lt(value, /** @src 0:86:993  \"contract SimpleStorage{...\" */ sload(1)))\n                        /// @src 0:406:431  \"Person[] public myFriends\"\n                        {\n                            revert(/** @src 0:86:993  \"contract SimpleStorage{...\" */ _3, _3)\n                        }\n                        /// @src 0:406:431  \"Person[] public myFriends\"\n                        let slot, offset := storage_array_index_access_struct_Person__dyn(value)\n                        /// @src 0:86:993  \"contract SimpleStorage{...\"\n                        let _6 := sload(/** @src 0:406:431  \"Person[] public myFriends\" */ slot)\n                        let _7 := add(slot, /** @src 0:86:993  \"contract SimpleStorage{...\" */ 1)\n                        let memPtr := mload(_1)\n                        let ret := _3\n                        let slotValue := sload(_7)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        let updated_pos := add(memPtr, _4)\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(updated_pos, and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _4)\n                        }\n                        case 1 {\n                            mstore(_3, _7)\n                            let dataPos := keccak256(_3, _4)\n                            let i := _3\n                            for { } lt(i, length) { i := add(i, _4) }\n                            {\n                                mstore(add(add(memPtr, i), _4), sload(dataPos))\n                                dataPos := add(dataPos, _5)\n                            }\n                            ret := add(add(memPtr, i), _4)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        let memPos := mload(_1)\n                        mstore(memPos, _6)\n                        mstore(add(memPos, _4), _1)\n                        let length_1 := mload(memPtr)\n                        mstore(add(memPos, _1), length_1)\n                        copy_memory_to_memory_with_cleanup(updated_pos, add(memPos, 96), length_1)\n                        return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), 96))\n                    }\n                    case 0x6f760f41 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _1) { revert(_3, _3) }\n                        let offset_1 := calldataload(_2)\n                        let _8 := 0xffffffffffffffff\n                        if gt(offset_1, _8) { revert(_3, _3) }\n                        if iszero(slt(add(offset_1, 35), calldatasize())) { revert(_3, _3) }\n                        let length_2 := calldataload(add(_2, offset_1))\n                        if gt(length_2, _8) { revert(_3, _3) }\n                        let _9 := 36\n                        let arrayPos := add(offset_1, _9)\n                        if gt(add(add(offset_1, length_2), _9), calldatasize()) { revert(_3, _3) }\n                        let value_1 := calldataload(_9)\n                        let memPtr_1 := mload(_1)\n                        let newFreePtr := add(memPtr_1, _1)\n                        if or(gt(newFreePtr, _8), lt(newFreePtr, memPtr_1))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _9)\n                        }\n                        mstore(_1, newFreePtr)\n                        mstore(memPtr_1, value_1)\n                        let _10 := abi_decode_available_length_string(/** @src 0:857:935  \"Person({...\" */ arrayPos, length_2, /** @src 0:86:993  \"contract SimpleStorage{...\" */ calldatasize())\n                        let _11 := 0x20\n                        /// @src 0:857:935  \"Person({...\"\n                        let _12 := add(memPtr_1, /** @src 0:86:993  \"contract SimpleStorage{...\" */ _11)\n                        mstore(_12, _10)\n                        let _13 := 1\n                        let oldLen := sload(_13)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _9)\n                        }\n                        sstore(_13, add(oldLen, _13))\n                        let slot_1, offset_2 := storage_array_index_access_struct_Person__dyn(oldLen)\n                        if offset_2\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, _3)\n                            revert(_3, _9)\n                        }\n                        sstore(slot_1, mload(memPtr_1))\n                        let memberSlot := add(slot_1, _13)\n                        let _14 := mload(_12)\n                        let newLen := mload(_14)\n                        if gt(newLen, _8)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _9)\n                        }\n                        let _15 := extract_byte_array_length(sload(memberSlot))\n                        if gt(_15, 0x1f)\n                        {\n                            mstore(_3, memberSlot)\n                            let data := keccak256(_3, _11)\n                            let deleteStart := add(data, shr(5, add(newLen, 0x1f)))\n                            if lt(newLen, _11) { deleteStart := data }\n                            let _16 := add(data, shr(5, add(_15, 0x1f)))\n                            let start := deleteStart\n                            for { } lt(start, _16) { start := add(start, _13) }\n                            { sstore(start, _3) }\n                        }\n                        let srcOffset := _3\n                        srcOffset := _11\n                        switch gt(newLen, 0x1f)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_3, memberSlot)\n                            let dstPtr := keccak256(_3, _11)\n                            let i_1 := _3\n                            for { } lt(i_1, loopEnd) { i_1 := add(i_1, _11) }\n                            {\n                                sstore(dstPtr, mload(add(_14, srcOffset)))\n                                dstPtr := add(dstPtr, _13)\n                                srcOffset := add(srcOffset, _11)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_14, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(memberSlot, add(shl(_13, newLen), _13))\n                        }\n                        default {\n                            let value_2 := _3\n                            if newLen\n                            {\n                                value_2 := mload(add(_14, srcOffset))\n                            }\n                            sstore(memberSlot, or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(_13, newLen)))\n                        }\n                        let pos := mload(_1)\n                        calldatacopy(pos, arrayPos, length_2)\n                        let _17 := add(pos, length_2)\n                        mstore(_17, /** @src 0:946:966  \"nameToFavoriteNumber\" */ 0x02)\n                        /// @src 0:86:993  \"contract SimpleStorage{...\"\n                        sstore(keccak256(pos, add(sub(_17, pos), _11)), value_1)\n                        return(_3, _3)\n                    }\n                    case 0x8bab8dd5 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let offset_3 := calldataload(_2)\n                        if gt(offset_3, 0xffffffffffffffff) { revert(_3, _3) }\n                        if iszero(slt(add(offset_3, 35), calldatasize())) { revert(_3, _3) }\n                        let array := abi_decode_available_length_string(add(offset_3, 36), calldataload(add(_2, offset_3)), calldatasize())\n                        let pos_1 := mload(_1)\n                        let length_3 := mload(array)\n                        copy_memory_to_memory_with_cleanup(add(array, 32), pos_1, length_3)\n                        let end := add(pos_1, length_3)\n                        mstore(end, /** @src 0:510:564  \"mapping(string => uint256) public nameToFavoriteNumber\" */ 2)\n                        /// @src 0:86:993  \"contract SimpleStorage{...\"\n                        let _18 := sload(keccak256(pos_1, add(sub(end, pos_1), 32)))\n                        let memPos_1 := mload(_1)\n                        mstore(memPos_1, _18)\n                        return(memPos_1, 32)\n                    }\n                    case 0x993a04b7 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let _19 := sload(_3)\n                        let memPos_2 := mload(_1)\n                        mstore(memPos_2, _19)\n                        return(memPos_2, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function storage_array_index_access_struct_Person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 0:406:431  \"Person[] public myFriends\" */ 1)))\n                /// @src 0:86:993  \"contract SimpleStorage{...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:406:431  \"Person[] public myFriends\" */ 1)\n                /// @src 0:86:993  \"contract SimpleStorage{...\"\n                slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, shl(/** @src 0:406:431  \"Person[] public myFriends\" */ 1, /** @src 0:86:993  \"contract SimpleStorage{...\" */ index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 0:86:993  \"contract SimpleStorage{...\"\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_available_length_string(src, length, end) -> array\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:86:993  \"contract SimpleStorage{...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:86:993  \"contract SimpleStorage{...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(length, 31), not(31)), 0x20))\n                array := memPtr\n                mstore(memPtr, length)\n                if gt(add(src, length), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:86:993  \"contract SimpleStorage{...\"\n                calldatacopy(add(memPtr, 0x20), src, length)\n                mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122023fcb2d2629acde7f554b6d15a623392d94948152ec54e26a8fc1fba1c84f68664736f6c63430008180033\"\n    }\n}\n","hash":"010000a1beee86a88da6d44352cfcf0ef4f417f5281c2d9bdab79b7685112a1f","factoryDependencies":{}}}}}}